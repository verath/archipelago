// Code generated by protoc-gen-go.
// source: proto/wire/event.proto
// DO NOT EDIT!

package wire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wire_game "github.com/verath/archipelago/lib/wire/game"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventEnvelope struct {
	// Types that are valid to be assigned to Event:
	//	*EventEnvelope_EventGameStart
	//	*EventEnvelope_EventGameOver
	//	*EventEnvelope_EventGameTick
	Event isEventEnvelope_Event `protobuf_oneof:"event"`
}

func (m *EventEnvelope) Reset()                    { *m = EventEnvelope{} }
func (m *EventEnvelope) String() string            { return proto.CompactTextString(m) }
func (*EventEnvelope) ProtoMessage()               {}
func (*EventEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isEventEnvelope_Event interface {
	isEventEnvelope_Event()
}

type EventEnvelope_EventGameStart struct {
	EventGameStart *EventGameStart `protobuf:"bytes,1,opt,name=event_game_start,json=eventGameStart,oneof"`
}
type EventEnvelope_EventGameOver struct {
	EventGameOver *EventGameOver `protobuf:"bytes,2,opt,name=event_game_over,json=eventGameOver,oneof"`
}
type EventEnvelope_EventGameTick struct {
	EventGameTick *EventGameTick `protobuf:"bytes,3,opt,name=event_game_tick,json=eventGameTick,oneof"`
}

func (*EventEnvelope_EventGameStart) isEventEnvelope_Event() {}
func (*EventEnvelope_EventGameOver) isEventEnvelope_Event()  {}
func (*EventEnvelope_EventGameTick) isEventEnvelope_Event()  {}

func (m *EventEnvelope) GetEvent() isEventEnvelope_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventEnvelope) GetEventGameStart() *EventGameStart {
	if x, ok := m.GetEvent().(*EventEnvelope_EventGameStart); ok {
		return x.EventGameStart
	}
	return nil
}

func (m *EventEnvelope) GetEventGameOver() *EventGameOver {
	if x, ok := m.GetEvent().(*EventEnvelope_EventGameOver); ok {
		return x.EventGameOver
	}
	return nil
}

func (m *EventEnvelope) GetEventGameTick() *EventGameTick {
	if x, ok := m.GetEvent().(*EventEnvelope_EventGameTick); ok {
		return x.EventGameTick
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventEnvelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventEnvelope_OneofMarshaler, _EventEnvelope_OneofUnmarshaler, _EventEnvelope_OneofSizer, []interface{}{
		(*EventEnvelope_EventGameStart)(nil),
		(*EventEnvelope_EventGameOver)(nil),
		(*EventEnvelope_EventGameTick)(nil),
	}
}

func _EventEnvelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventEnvelope)
	// event
	switch x := m.Event.(type) {
	case *EventEnvelope_EventGameStart:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EventGameStart); err != nil {
			return err
		}
	case *EventEnvelope_EventGameOver:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EventGameOver); err != nil {
			return err
		}
	case *EventEnvelope_EventGameTick:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EventGameTick); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventEnvelope.Event has unexpected type %T", x)
	}
	return nil
}

func _EventEnvelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventEnvelope)
	switch tag {
	case 1: // event.event_game_start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventGameStart)
		err := b.DecodeMessage(msg)
		m.Event = &EventEnvelope_EventGameStart{msg}
		return true, err
	case 2: // event.event_game_over
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventGameOver)
		err := b.DecodeMessage(msg)
		m.Event = &EventEnvelope_EventGameOver{msg}
		return true, err
	case 3: // event.event_game_tick
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventGameTick)
		err := b.DecodeMessage(msg)
		m.Event = &EventEnvelope_EventGameTick{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventEnvelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventEnvelope)
	// event
	switch x := m.Event.(type) {
	case *EventEnvelope_EventGameStart:
		s := proto.Size(x.EventGameStart)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventEnvelope_EventGameOver:
		s := proto.Size(x.EventGameOver)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventEnvelope_EventGameTick:
		s := proto.Size(x.EventGameTick)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventGameStart struct {
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *EventGameStart) Reset()                    { *m = EventGameStart{} }
func (m *EventGameStart) String() string            { return proto.CompactTextString(m) }
func (*EventGameStart) ProtoMessage()               {}
func (*EventGameStart) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *EventGameStart) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

type EventGameOver struct {
	PlayerIdWinner string `protobuf:"bytes,1,opt,name=player_id_winner,json=playerIdWinner" json:"player_id_winner,omitempty"`
}

func (m *EventGameOver) Reset()                    { *m = EventGameOver{} }
func (m *EventGameOver) String() string            { return proto.CompactTextString(m) }
func (*EventGameOver) ProtoMessage()               {}
func (*EventGameOver) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *EventGameOver) GetPlayerIdWinner() string {
	if m != nil {
		return m.PlayerIdWinner
	}
	return ""
}

type EventGameTick struct {
	Game *wire_game.Game `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
}

func (m *EventGameTick) Reset()                    { *m = EventGameTick{} }
func (m *EventGameTick) String() string            { return proto.CompactTextString(m) }
func (*EventGameTick) ProtoMessage()               {}
func (*EventGameTick) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *EventGameTick) GetGame() *wire_game.Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func init() {
	proto.RegisterType((*EventEnvelope)(nil), "wire.EventEnvelope")
	proto.RegisterType((*EventGameStart)(nil), "wire.EventGameStart")
	proto.RegisterType((*EventGameOver)(nil), "wire.EventGameOver")
	proto.RegisterType((*EventGameTick)(nil), "wire.EventGameTick")
}

func init() { proto.RegisterFile("proto/wire/event.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x1b, 0xad, 0xda, 0x8e, 0x34, 0x2d, 0xab, 0x48, 0xb0, 0x17, 0x89, 0x97, 0x5e, 0x4c,
	0x40, 0xbd, 0x78, 0x10, 0xa4, 0x50, 0xac, 0x27, 0x21, 0x0a, 0x82, 0x97, 0x90, 0x36, 0x83, 0x2c,
	0x4d, 0xb2, 0x61, 0x5d, 0x52, 0x7c, 0x53, 0x1f, 0x47, 0x66, 0x12, 0xcb, 0x26, 0xf4, 0xfa, 0xfb,
	0xfe, 0xf0, 0xed, 0x0e, 0x5c, 0x94, 0x5a, 0x19, 0x15, 0x6e, 0xa5, 0xc6, 0x10, 0x2b, 0x2c, 0x4c,
	0xc0, 0x40, 0xf4, 0x89, 0x5c, 0x4e, 0x2d, 0xf5, 0x2b, 0xc9, 0x31, 0xcc, 0x55, 0x8a, 0x59, 0x6d,
	0xf1, 0x7f, 0x1d, 0x18, 0x2d, 0x28, 0xb2, 0x28, 0x2a, 0xcc, 0x54, 0x89, 0xe2, 0x09, 0x26, 0xdc,
	0x11, 0x93, 0x37, 0xfe, 0x36, 0x89, 0x36, 0x9e, 0x73, 0xe5, 0xcc, 0x4e, 0x6f, 0xcf, 0x03, 0xea,
	0x08, 0xd8, 0xfe, 0x9c, 0xe4, 0xf8, 0x46, 0xda, 0xb2, 0x17, 0xb9, 0xd8, 0x22, 0xe2, 0x11, 0xc6,
	0x56, 0x83, 0xaa, 0x50, 0x7b, 0x07, 0x5c, 0x70, 0xd6, 0x29, 0x78, 0xad, 0x50, 0x2f, 0x7b, 0xd1,
	0x08, 0x6d, 0xd0, 0x89, 0x1b, 0xb9, 0xde, 0x78, 0x87, 0x7b, 0xe3, 0xef, 0x72, 0xbd, 0x69, 0xc5,
	0x09, 0xcc, 0x4f, 0xe0, 0x88, 0x81, 0x7f, 0x03, 0x6e, 0x7b, 0xaa, 0x98, 0xc2, 0xb0, 0xcc, 0x92,
	0x1f, 0xd4, 0xb1, 0x4c, 0xf9, 0x4d, 0xc3, 0x68, 0x50, 0x83, 0x97, 0xd4, 0x7f, 0x68, 0x3e, 0x62,
	0xb7, 0x63, 0x06, 0x93, 0x9d, 0x3b, 0xde, 0xca, 0xa2, 0x40, 0xdd, 0x84, 0xdc, 0xff, 0xd0, 0x07,
	0x53, 0xff, 0xde, 0x8a, 0xd2, 0x06, 0x71, 0x0d, 0x7d, 0x1a, 0xdf, 0xfc, 0xdb, 0xb8, 0xde, 0x4d,
	0x24, 0x20, 0x4b, 0xc4, 0xe2, 0x1c, 0x3e, 0x07, 0x99, 0x5c, 0xf1, 0x5d, 0x56, 0xc7, 0x7c, 0x8d,
	0xbb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x59, 0xc6, 0x04, 0xca, 0x01, 0x00, 0x00,
}
