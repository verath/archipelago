syntax = "proto3";
package wire.msg;
option go_package = "github.com/verath/archipelago/lib/wire/msg";

/* Model */

message Coordinate {
    int32 x = 1;
    int32 y = 2;
}

message FloatCoordinate {
    float x = 1;
    float y = 2;
}

// PlayerState represents the current exclusive state of a Player.
enum PlayerState {
    // ALIVE is when still alive in the game.
	ALIVE = 0;
	// PENDING_REVIVAL is when dead, but may be revived.
	PENDING_REVIVAL = 1;
	// DEAD is when dead and will remain dead.
	DEAD = 2;
	// LEFT_GAME is when the Player has left the game.
	LEFT_GAME = 3;
}

message Player {
    string id = 1;
    PlayerState state = 2;
}

message Army {
    string owner_id = 1;
    int32 strength = 2;
}

message Airplane {
    string id = 1;
    Army army = 2;
    FloatCoordinate position = 3;
    float direction = 4;
    // Speed of the Airplane [tiles/ms]. Not set if default speed.
    float speed = 5;
}

message Island {
    string id = 1;
    Army army = 2;
    Coordinate position = 3;
    float size = 4;
}

message Game {
    string id = 1;
    Coordinate size = 2;
    Player player_neutral = 3;
    repeated Player players = 4;
    repeated Island islands = 5;
    repeated Airplane airplanes = 6;
}

/* Event */

message EventEnvelope {
    oneof event {
        EventGameStart event_game_start = 1;
        EventGameOver event_game_over = 2;
        EventGameTick event_game_tick = 3;
    }
}

message EventGameStart {
    string player_id = 1;
    // Aprox. time between ticks [ms].
    uint32 tick_interval = 2;
}

message EventGameOver {
    string winner_id = 1;
}

message EventGameTick {
    Game game = 1;
}

/* Action */

message ActionEnvelope {
    oneof action {
        ActionGameLeave action_game_leave = 1;
        ActionGameLaunch action_game_launch = 2;
    }
}

message ActionGameLeave {
}

message ActionGameLaunch {
    string from_id = 1;
    string to_id = 2;
}
